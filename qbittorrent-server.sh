#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([url],[],[webui url],[])
# ARG_OPTIONAL_SINGLE([email],[],[your email],[])
# ARG_POSITIONAL_INF([docker-args],[docker-compose arguments])
# ARG_HELP([Run production image])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_docker_args=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_url=
_arg_email=


print_help()
{
	printf '%s\n' "Run production image"
	printf 'Usage: %s [--url <arg>] [--email <arg>] [-h|--help] [<docker-args-1>] ... [<docker-args-n>] ...\n' "$0"
	printf '\t%s\n' "<docker-args>: docker-compose arguments"
	printf '\t%s\n' "--url: webui url (no default)"
	printf '\t%s\n' "--email: your email (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--url)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_url="$2"
				shift
				;;
			--url=*)
				_arg_url="${_key##--url=}"
				;;
			--email)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_email="$2"
				shift
				;;
			--email=*)
				_arg_email="${_key##--email=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names=""
	_our_args=$((${#_positionals[@]} - 0))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_docker_args[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

cd $(dirname $0)
cd ..

set -e -o pipefail

mkdir -p config
mkdir -p torrents
mkdir -p downloads

docker_compose=$(cat <<EOF
version: "3.9"

services:
  qBittorrent:
    container_name: qBittorrent
    image: wernight/qbittorrent
    ports:
      - 6881:6881/tcp
      - 6881:6881/udp
    expose:
      - "8080"
    user: $UID:$GID
    volumes:
      - ./config:/config
      - ./torrents:/torrents
      - ./downloads:/downloads
    environment:
      - VIRTUAL_PORT=8080
      - VIRTUAL_HOST=$_arg_url
      - LETSENCRYPT_HOST=$_arg_url
      - LETSENCRYPT_EMAIL=$_arg_email
EOF
)

echo "$docker_compose" | docker-compose -p qbittorrent-server -f - $(echo "${_arg_docker_args[*]}")

# ] <-- needed because of Argbash
